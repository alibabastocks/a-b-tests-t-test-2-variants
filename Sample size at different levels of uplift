{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMUTuuWzGZalRGNC9W+MIA/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alibabastocks/a-b-tests-t-test-2-variants/blob/main/Sample%20size%20at%20different%20levels%20of%20uplift\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "LIJZSStkKOu1"
      },
      "outputs": [],
      "source": [
        "# Import libraries\n",
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.stats.power\n",
        "\n",
        "# Baseline conversion rate in control group\n",
        "control_conversion_rate = 0.063\n",
        "\n",
        "# Desired uplift in conversion rate for new variation\n",
        "desired_uplift = (0.10, 0.15, 0.20)\n",
        "\n",
        "# Traffic allocation percentages\n",
        "traffic_allocation_control = 0.5\n",
        "traffic_allocation_variation = 0.5\n",
        "\n",
        "# Desired power of the test\n",
        "power = 0.8\n",
        "\n",
        "# Significance level (alpha)\n",
        "alpha = 0.05\n",
        "\n",
        "# Type of test (two-sided by default)\n",
        "alternative = \"two-sided\"\n",
        "\n",
        "# Calculate traffic ratio\n",
        "traffic_ratio = traffic_allocation_control / traffic_allocation_variation"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate new conversion rates for each uplift level\n",
        "new_conversion_rates = []\n",
        "for uplift in desired_uplift:\n",
        "    new_conversion_rates.append(control_conversion_rate + (control_conversion_rate * uplift))\n",
        "\n",
        "# Calculate standardized effect size for each uplift level\n",
        "effect_size_std = sm.stats.proportion_effectsize(new_conversion_rates, control_conversion_rate)\n",
        "\n",
        "# Calculate minimum required sample sizes\n",
        "sample_sizes = []\n",
        "for effect in effect_size_std:\n",
        "  sample_size = statsmodels.stats.power.TTestIndPower().solve_power(\n",
        "      effect_size=effect, power=power, alpha=alpha, nobs1=None, ratio=traffic_ratio, alternative=alternative\n",
        "  )\n",
        "  sample_sizes.append(round(sample_size))\n",
        "\n",
        "# Print results\n",
        "print(\"New Conversion Rates:\", new_conversion_rates)\n",
        "print(\"Minimum Sample Sizes per Group:\", sample_sizes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jw3peUd3LAHN",
        "outputId": "89b4be36-eda0-403c-d9f0-fc57f4511a75"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "New Conversion Rates: [0.0693, 0.07245, 0.0756]\n",
            "Minimum Sample Sizes per Group: [24420, 11087, 6366]\n"
          ]
        }
      ]
    }
  ]
}